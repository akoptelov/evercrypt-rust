use crate::evercrypt_bindings::*;

#[derive(Clone, Copy)]
pub enum AEADCipher {
    Aes128Gcm = 0,
    Aes256Gcm = 1,
    Chacha20Poly1305 = 2,
}

#[derive(Debug)]
pub enum AEADError {
    InvalidInit,
    InvalidCiphertext,
    InvalidIvLen,
}

pub struct AEAD {
    c_state: *mut EverCrypt_AEAD_state_s,
}

impl AEAD {
    pub fn init(alg: AEADCipher, k: &[u8]) -> Result<Self, AEADError> {
        unsafe {
            // Make sure this happened.
            EverCrypt_AutoConfig2_init();
        }
        let state = unsafe {
            let mut state_ptr: *mut EverCrypt_AEAD_state_s = std::ptr::null_mut();
            let e = EverCrypt_AEAD_create_in(alg as u8, &mut state_ptr, k.to_vec().as_mut_ptr());
            if e != 0 {
                return Err(AEADError::InvalidInit);
            }
            state_ptr
        };
        Ok(Self { c_state: state })
    }

    /// Returns `(ctxt, tag)`.
    pub fn encrypt(
        &self,
        msg: &[u8],
        iv: &[u8],
        aad: &[u8],
    ) -> Result<(Vec<u8>, Vec<u8>), AEADError> {
        if iv.len() != 12 {
            return Err(AEADError::InvalidIvLen);
        }
        let mut ctxt = vec![0u8; msg.len()];
        let mut tag = vec![0u8; 16];
        unsafe {
            EverCrypt_AEAD_encrypt(
                self.c_state,
                iv.as_ptr() as _,
                12,
                aad.as_ptr() as _,
                aad.len() as u32,
                msg.as_ptr() as _,
                msg.len() as u32,
                ctxt.as_mut_ptr(),
                tag.as_mut_ptr(),
            );
        }
        Ok((ctxt, tag))
    }

    pub fn decrypt(
        &self,
        ctxt: &[u8],
        tag: &[u8],
        iv: &[u8],
        aad: &[u8],
    ) -> Result<Vec<u8>, AEADError> {
        if iv.len() != 12 {
            return Err(AEADError::InvalidIvLen);
        }
        let mut msg = vec![0u8; ctxt.len()];
        let r = unsafe {
            EverCrypt_AEAD_decrypt(
                self.c_state,
                iv.as_ptr() as _,
                12,
                aad.as_ptr() as _,
                aad.len() as u32,
                ctxt.as_ptr() as _,
                ctxt.len() as u32,
                tag.as_ptr() as _,
                msg.as_mut_ptr(),
            )
        };
        if r as u32 != EverCrypt_Error_Success {
            Err(AEADError::InvalidCiphertext)
        } else {
            Ok(msg)
        }
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    #[test]
    fn test_aes128gcm() {
        unsafe {
            EverCrypt_AutoConfig2_init();
        }
        let k: [u8; 16] = [
            0x28, 0xff, 0x3d, 0xef, 0x08, 0x17, 0x93, 0x11, 0xe2, 0x73, 0x4c, 0x6d, 0x1c, 0x4e,
            0x28, 0x71,
        ];
        let msg = [
            0xdf, 0xc6, 0x1a, 0x20, 0xdf, 0x85, 0x05, 0xb5, 0x3e, 0x3c, 0xd5, 0x9f, 0x25, 0x77,
            0x0d, 0x50, 0x18, 0xad, 0xd3, 0xd6,
        ];
        let iv = [
            0x32, 0xbc, 0xb9, 0xb5, 0x69, 0xe3, 0xb8, 0x52, 0xd3, 0x7c, 0x76, 0x6a,
        ];
        let aad = [0xc3];
        let ctxt_expected = [
            0xf5, 0x8d, 0x45, 0x32, 0x12, 0xc2, 0xc8, 0xa4, 0x36, 0xe9, 0x28, 0x36, 0x72, 0xf5,
            0x79, 0xf1, 0x19, 0x12, 0x29, 0x78,
        ];
        let tag_expected = [
            0x59, 0x01, 0x13, 0x1d, 0x07, 0x60, 0xc8, 0x71, 0x59, 0x01, 0xd8, 0x81, 0xfd, 0xfd,
            0x3b, 0xc0,
        ];
        let cipher = AEAD::init(AEADCipher::Aes128Gcm, &k).unwrap();
        let (ctxt, tag) = cipher.encrypt(&msg, &iv, &aad).unwrap();
        assert_eq!(ctxt_expected[..], ctxt[..]);
        assert_eq!(tag_expected[..], tag[..]);
        let msg_out = cipher.decrypt(&ctxt, &tag, &iv, &aad).unwrap();
        assert_eq!(msg_out, msg);
        unsafe {
            EverCrypt_AEAD_free(cipher.c_state);
        }
    }
    #[test]
    fn test_aes256gcm() {
        let k: [u8; 32] = [
            0x92, 0xac, 0xe3, 0xe3, 0x48, 0xcd, 0x82, 0x10, 0x92, 0xcd, 0x92, 0x1a, 0xa3, 0x54,
            0x63, 0x74, 0x29, 0x9a, 0xb4, 0x62, 0x09, 0x69, 0x1b, 0xc2, 0x8b, 0x87, 0x52, 0xd1,
            0x7f, 0x12, 0x3c, 0x20,
        ];
        let msg = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09];
        let iv = [
            0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb,
        ];
        let aad = [0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff];
        let ctxt_expected = [0xe2, 0x7a, 0xbd, 0xd2, 0xd2, 0xa5, 0x3d, 0x2f, 0x13, 0x6b];
        let tag_expected = [
            0x9a, 0x4a, 0x25, 0x79, 0x52, 0x93, 0x01, 0xbc, 0xfb, 0x71, 0xc7, 0x8d, 0x40, 0x60,
            0xf5, 0x2c,
        ];
        let cipher = AEAD::init(AEADCipher::Aes256Gcm, &k).unwrap();
        let (ctxt, tag) = cipher.encrypt(&msg, &iv, &aad).unwrap();
        assert_eq!(ctxt_expected[..], ctxt[..]);
        assert_eq!(tag_expected[..], tag[..]);
        let msg_out = cipher.decrypt(&ctxt, &tag, &iv, &aad).unwrap();
        assert_eq!(msg_out, msg);
        unsafe {
            EverCrypt_AEAD_free(cipher.c_state);
        }
    }
    #[test]
    fn test_chachapoly() {
        let k: [u8; 32] = [
            0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d,
            0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b,
            0x9c, 0x9d, 0x9e, 0x9f,
        ];
        let msg = [
            0x4c, 0x61, 0x64, 0x69, 0x65, 0x73, 0x20, 0x61, 0x6e, 0x64, 0x20, 0x47, 0x65, 0x6e,
            0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
            0x63, 0x6c, 0x61, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x27, 0x39, 0x39, 0x3a, 0x20,
            0x49, 0x66, 0x20, 0x49, 0x20, 0x63, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x6f, 0x66, 0x66,
            0x65, 0x72, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x6f, 0x6e,
            0x65, 0x20, 0x74, 0x69, 0x70, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20,
            0x66, 0x75, 0x74, 0x75, 0x72, 0x65, 0x2c, 0x20, 0x73, 0x75, 0x6e, 0x73, 0x63, 0x72,
            0x65, 0x65, 0x6e, 0x20, 0x77, 0x6f, 0x75, 0x6c, 0x64, 0x20, 0x62, 0x65, 0x20, 0x69,
            0x74, 0x2e,
        ];
        let iv = [
            0x07, 0x00, 0x00, 0x00, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
        ];
        let aad = [
            0x50, 0x51, 0x52, 0x53, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7,
        ];
        let ctxt_expected = [
            0xd3, 0x1a, 0x8d, 0x34, 0x64, 0x8e, 0x60, 0xdb, 0x7b, 0x86, 0xaf, 0xbc, 0x53, 0xef,
            0x7e, 0xc2, 0xa4, 0xad, 0xed, 0x51, 0x29, 0x6e, 0x08, 0xfe, 0xa9, 0xe2, 0xb5, 0xa7,
            0x36, 0xee, 0x62, 0xd6, 0x3d, 0xbe, 0xa4, 0x5e, 0x8c, 0xa9, 0x67, 0x12, 0x82, 0xfa,
            0xfb, 0x69, 0xda, 0x92, 0x72, 0x8b, 0x1a, 0x71, 0xde, 0x0a, 0x9e, 0x06, 0x0b, 0x29,
            0x05, 0xd6, 0xa5, 0xb6, 0x7e, 0xcd, 0x3b, 0x36, 0x92, 0xdd, 0xbd, 0x7f, 0x2d, 0x77,
            0x8b, 0x8c, 0x98, 0x03, 0xae, 0xe3, 0x28, 0x09, 0x1b, 0x58, 0xfa, 0xb3, 0x24, 0xe4,
            0xfa, 0xd6, 0x75, 0x94, 0x55, 0x85, 0x80, 0x8b, 0x48, 0x31, 0xd7, 0xbc, 0x3f, 0xf4,
            0xde, 0xf0, 0x8e, 0x4b, 0x7a, 0x9d, 0xe5, 0x76, 0xd2, 0x65, 0x86, 0xce, 0xc6, 0x4b,
            0x61, 0x16,
        ];
        let tag_expected = [
            0x1a, 0xe1, 0x0b, 0x59, 0x4f, 0x09, 0xe2, 0x6a, 0x7e, 0x90, 0x2e, 0xcb, 0xd0, 0x60,
            0x06, 0x91,
        ];
        let cipher = AEAD::init(AEADCipher::Chacha20Poly1305, &k).unwrap();
        let (ctxt, tag) = cipher.encrypt(&msg, &iv, &aad).unwrap();
        assert_eq!(ctxt_expected[..], ctxt[..]);
        assert_eq!(tag_expected[..], tag[..]);
        let msg_out = cipher.decrypt(&ctxt, &tag, &iv, &aad).unwrap();
        assert_eq!(msg_out[..], msg[..]);
        unsafe {
            EverCrypt_AEAD_free(cipher.c_state);
        }
    }
}
